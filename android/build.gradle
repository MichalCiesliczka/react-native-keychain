apply plugin: 'com.android.library'

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
  compileSdkVersion safeExtGet('compileSdkVersion', 28)
  buildToolsVersion safeExtGet('buildToolsVersion', '28.0.3')

  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', 19)
    targetSdkVersion safeExtGet('targetSdkVersion', 28)
    versionCode 1
    versionName "1.0"
  }
  lintOptions {
    abortOnError false
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  // Gradle automatically adds 'android.test.runner' as a dependency.
  useLibrary 'android.test.runner'
  useLibrary 'android.test.base'
  useLibrary 'android.test.mock'

  testOptions {
    unitTests {
      includeAndroidResources = true
    }
  }
}

repositories {
  mavenCentral()
}

configurations {
  repack { transitive = false }
}

dependencies {
  // include re-packed facebook conceal lib
  implementation fileTree(dir: "${buildDir}/intermediates/repack", include: ["*-repack.aar"])

  implementation 'com.facebook.react:react-native:+'
  implementation 'androidx.appcompat:appcompat:1.1.0'
  implementation 'androidx.legacy:legacy-support-v4:1.0.0'
  implementation 'androidx.biometric:biometric:1.0.0-rc01'

  /* https://github.com/facebook/conceal/releases */
  repack "com.facebook.conceal:conceal:2.0.2"

  //
  // Biometric source code:
  //   https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/biometric/src/main/java/androidx/biometric
  //

  /* Unit Testing Frameworks */
  testImplementation "junit:junit:4.12"

  /* Mockito, https://mvnrepository.com/artifact/org.mockito/mockito-inline */
  testImplementation "org.mockito:mockito-inline:3.1.0"

  /* https://mvnrepository.com/artifact/org.hamcrest/hamcrest/2.1 */
  testImplementation "org.hamcrest:hamcrest:2.1"

  /* http://robolectric.org/getting-started/ */
  testImplementation("org.robolectric:robolectric:4.3.1")
}

task repackConceal(dependsOn: configurations.repack) {
  def concealVersion = configurations.repack.allDependencies.first().version
  def generation = "${project.buildDir}/intermediates/repack"
  def conceal = "com.facebook.conceal@${concealVersion}"
  def destination = "${generation}/${conceal}"

  doLast {
    copy {
      from { zipTree(configurations.repack.singleFile) }
      into "${destination}"
    }

    copy {
      from zipTree("${destination}/classes.jar")
      into "${destination}/classes"
    }
  }

  task recreateConcealClassesJar(type: Zip) {
    archiveFileName = "classes-patched.jar"
    destinationDirectory = file("${destination}")
    from("${destination}/classes") {
      exclude '**/facebook/jni/'
      exclude '**/facebook/proguard/'
      exclude '**/facebook/soloader/'
    }
  }

  task recreateConcealAar(type: Zip, dependsOn: recreateConcealClassesJar) {
    archiveFileName = "com.facebook.conceal-${concealVersion}-repack.aar"
    destinationDirectory = file("${generation}")
    from("${destination}") {
      exclude '**/jni/*/libfb.so'
      exclude '**/classes'
      exclude 'classes.jar'
      rename('classes-patched.jar', 'classes.jar')
    }
  }

  finalizedBy recreateConcealAar
}

build.dependsOn(repackConceal)
