buildscript {
  repositories {
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath 'com.adarshr:gradle-test-logger-plugin:2.0.0'
  }
}

apply plugin: 'com.android.library'
apply plugin: "com.adarshr.test-logger"

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

/* Is AndroidX forcing enabled. Often defined at `gradle.properties` file. */
def isAndroidX = Boolean.parseBoolean("${project.properties["android.useAndroidX"]}")
/* Is compatibility mode needed? By default: enabled. */
def isCompatibilityAndRepacking = Boolean.parseBoolean("${safeExtGet("react-native-keychain.compatibility", true)}")

android {
  compileSdkVersion safeExtGet('compileSdkVersion', 28)
  buildToolsVersion safeExtGet('buildToolsVersion', '28.0.3')

  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', 19)
    targetSdkVersion safeExtGet('targetSdkVersion', 28)
    versionCode 1
    versionName "1.0"
  }
  lintOptions {
    abortOnError false
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  // Gradle automatically adds 'android.test.runner' as a dependency.
  useLibrary 'android.test.runner'
  useLibrary 'android.test.base'
  useLibrary 'android.test.mock'

  testOptions {
    unitTests {
      includeAndroidResources = true
    }
  }
}

repositories {
  mavenCentral()
}

configurations {
  repack { transitive = false }
  compatibility { transitive = false }
  support
  androidx
}

dependencies {
  implementation 'com.facebook.react:react-native:+'

  //region Compatibility and Re-pack
  if (isCompatibilityAndRepacking) {
    androidx 'androidx.appcompat:appcompat:1.1.0'
    androidx 'androidx.legacy:legacy-support-v4:1.0.0'

    support 'com.android.support:appcompat-v7:28.0.0'
    support 'com.android.support:support-v4:28.0.0'

    // include re-packed facebook conceal lib, https://github.com/facebook/conceal/releases
    repack "com.facebook.conceal:conceal:1.1.3@aar"

    /* https://mvnrepository.com/artifact/androidx.biometric/biometric
        src: http://bit.ly/31DhLZG */
    compatibility 'androidx.biometric:biometric:1.0.0-rc02@aar'
  }
  //endregion

  if (!isCompatibilityAndRepacking) {
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.biometric:biometric:1.0.0-rc02@aar'
    implementation "com.facebook.conceal:conceal:1.1.3@aar"
  }

  /* Unit Testing Frameworks */
  testImplementation "junit:junit:4.12"

  /* Mockito, https://mvnrepository.com/artifact/org.mockito/mockito-inline */
  testImplementation "org.mockito:mockito-inline:3.1.0"

  /* https://mvnrepository.com/artifact/org.hamcrest/hamcrest/2.1 */
  testImplementation "org.hamcrest:hamcrest:2.1"

  /* http://robolectric.org/getting-started/ */
  testImplementation("org.robolectric:robolectric:4.3.1")
}

//region Compatibility & Re-packing
if (isCompatibilityAndRepacking) {
  /* Special manipulations that allows to patch files and do backward compatibility with 'Android Support Library' */
  final def destinationDir = "generated"
  final def destinationCompatibilityDir = "${project.buildDir}/${destinationDir}/compatibility"
  final def destinationRepackDir = "${project.buildDir}/${destinationDir}/repack"
  final def explodedAaaDir = "${project.buildDir}/${destinationDir}/explodedAar"
  final def libPrefix = isAndroidX ? "androidx" : "support"

  task repackConceal(dependsOn: configurations.repack, type: Zip) {
    group = "Workarounds"
    description = "repack facebook conceal library, exclude soloader sources"

    def concealVersion = configurations.repack.allDependencies.first().version
    def conceal = "com.facebook.conceal@${concealVersion}"
    def repackDir = "${destinationRepackDir}/${conceal}"
    def outputFileName = "com.facebook.conceal-${concealVersion}-repack"
    def outputAarFile = "${outputFileName}.aar"
    def outputAarFilePath = "${destinationRepackDir}/${outputAarFile}"

    task unpackConcealAar(dependsOn: configurations.repack, type: Copy) {
      from { zipTree(configurations.repack.singleFile) }
      into "${repackDir}"

      doLast {
        copy {
          from zipTree("${repackDir}/classes.jar")
          into "${repackDir}/classes"
        }
      }
    }

    task packConcealClasses(dependsOn: configurations.repack, type: Zip) {
      dependsOn unpackConcealAar

      archiveFileName = "classes-patched.jar"
      destinationDirectory = file("${repackDir}")
      from("${repackDir}/classes") {
        exclude '**/facebook/jni/'
        exclude '**/facebook/proguard/'
        exclude '**/facebook/soloader/'
      }
    }

    dependsOn packConcealClasses
    archiveFileName = outputAarFile
    destinationDirectory = file("${destinationRepackDir}")
    from("${repackDir}") {
      exclude '**/jni/*/libfb.so'
      exclude '**/classes'
      exclude 'classes.jar'
      rename('classes-patched.jar', 'classes.jar')
    }

    doLast {
      copy {
        from zipTree(outputAarFilePath)
        into "${explodedAaaDir}/${outputFileName}/"
      }
    }
  }

  task compatibilityBiometric(type: Exec,
    dependsOn: [configurations.compatibility, configurations.support, configurations.androidx]) {
    group = "Workarounds"
    description = "compatibility, remap biometric library to android support instead of androidx"

    def biometricVersion = configurations.compatibility.allDependencies.first().version
    def inputFile = "biometric-${biometricVersion}.aar"
    def outputFileName = "biometric-${biometricVersion}-${libPrefix}"
    def outputFile = "${outputFileName}.aar"
    def jetifierDir = "${project.projectDir}/../bin/jetifier-standalone"
    def jetifierConfig = file("${jetifierDir}/biometric-patched.config.json").absolutePath
    def bin = file("${jetifierDir}/bin").absolutePath
    def inputAarFilePath = "${destinationCompatibilityDir}/${inputFile}"
    def outputAarFilePath = "${destinationCompatibilityDir}/${outputFile}"

    logger.lifecycle("androidx: ${isAndroidX}, support lib: ${!isAndroidX}")
    project.dependencies {
      implementation(isAndroidX ? configurations.androidx : configurations.support)
    }

    task downloadCompatibilityBiometric(dependsOn: configurations.compatibility, type: Copy) {
      from { configurations.compatibility.singleFile }
      into "${destinationCompatibilityDir}"
    }

    dependsOn downloadCompatibilityBiometric
    outputs.cacheIf { true }
    outputs.file outputAarFilePath
    inputs.file inputAarFilePath

    workingDir "${destinationCompatibilityDir}"

    // https://developer.android.com/studio/command-line/jetifier
    commandLine "${bin}/jetifier-standalone"
    args = [
      (isAndroidX ? "" : "--reversed"),
      "--input", inputAarFilePath,
      "--output", outputAarFilePath,
      "--config", "${jetifierConfig}",
      "--log", "info"
    ]

    doLast {
      copy {
        from zipTree(outputAarFilePath)
        into "${explodedAaaDir}/${outputFileName}/"
      }
    }
  }

  /* Make our tasks always executed in front of any `build` operation */
  defaultTasks "repackConceal", "compatibilityBiometric"
  preBuild.dependsOn([repackConceal, compatibilityBiometric])

  /* Register configurations as artifacts and assign task as a configuration builder. */
  artifacts {
    // KeychainExample/node_modules/react-native-keychain/android/
    //    build/generated/compatibility/biometric-1.0.0-rc02-androidx.aar
    compatibility file: compatibilityBiometric.outputs.files.singleFile,
      builtBy: compatibilityBiometric, type: 'aar'

    // KeychainExample/node_modules/react-native-keychain/android/
    //    build/generated/repack/com.facebook.conceal-1.1.3-repack.aar
    repack file: repackConceal.outputs.files.singleFile,
      builtBy: repackConceal, type: 'aar'
  }

  /* Register our repack and compatibility dirs as repositories */
  gradle.allprojects {
    repositories {
      flatDir(name: "compatibility", dirs: destinationCompatibilityDir)
      flatDir(name: "repack", dirs: destinationRepackDir)
    }
  }

  /* Inject exploded AARs as a compilation sources */
  android.sourceSets.main { s ->
    file(explodedAaaDir).mkdirs()

    file(explodedAaaDir).eachDir { dir ->
      println "~> ${dir}"

      project.dependencies {
        implementation fileTree(dir: dir, include: ["*.jar"])
      }

      s.aidl.srcDir "$dir/aidl"
      s.assets.srcDir "$dir/assets"
      s.java.srcDir "$dir/java"
      s.jni.srcDir "$dir/jni"
      s.jniLibs.srcDir "$dir/jni"
      s.renderscript.srcDir "$dir/rs"
      s.res.srcDir "$dir/res"
    }
  }

  //gradle.rootProject.subprojects {
  //  dependencies {
  //    implementation(name: "com.facebook.conceal-1.1.3-repack", ext: 'aar')
  //    implementation(name: "biometric-1.0.0-rc02-androidx", ext: 'aar')
  //  }
  //}
}
//endregion
